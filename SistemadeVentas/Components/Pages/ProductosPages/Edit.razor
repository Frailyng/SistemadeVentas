@page "/Productos/Edit/{ProductoId:int}"
@inject ProductosService ProductosService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<EditForm Model="producto" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Editar Producto</h3>
        </div>

        <div class="card-body">

            <div class="row">

                <div class="col-md-6 mb-3">
                    <label for="ProductoId" class="form-label">ProductoId:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="producto.ProductoId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label for="Nombre" class="form-label">Nombre:</label>
                <InputText @bind-Value="producto.Nombre" class="form-control" />
                <ValidationMessage For="@(() => producto.Nombre)" />
            </div>

            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripción:</label>
                <InputText @bind-Value="producto.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => producto.Descripcion)" />
            </div>

            <div class="mb-3">
                <label for="Precio" class="form-label">Precio:</label>
                <InputNumber @bind-Value="producto.Precio" class="form-control" />
                <ValidationMessage For="@(() => producto.Precio)" />
            </div>

            <div class="mb-3">
                <label for="Categoria" class="form-label">Categoría:</label>
                <InputText @bind-Value="producto.Categoria" class="form-control" />
                <ValidationMessage For="@(() => producto.Categoria)" />
            </div>

            <div class="mb-3">
                <label for="CodigoProducto" class="form-label">Código Producto:</label>
                <InputText @bind-Value="producto.CodigoProducto" class="form-control" />
                <ValidationMessage For="@(() => producto.CodigoProducto)" />
            </div>

            <div class="mb-3">
                <label for="Proveedor" class="form-label">Proveedor:</label>
                <InputText @bind-Value="producto.Proveedor" class="form-control" />
                <ValidationMessage For="@(() => producto.Proveedor)" />
            </div>

            <div class="mb-3">
                <label for="EstaActivo" class="form-label">Activo:</label>
                <InputCheckbox @bind-Value="producto.EstaActivo" class="form-check-input" />
            </div>

        </div>

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
                <a type="button" href="/Productos/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int? ProductoId { get; set; }
    public Productos producto { get; set; } = new Productos();
    private bool Existe = false;

    protected override async Task OnInitializedAsync()
    {
        if (ProductoId.HasValue)
        {
            producto.ProductoId = ProductoId.Value;
            await Buscar();
        }
    }

    public void Nuevo()
    {
        producto = new Productos();
        Existe = false;
    }

    public async Task Buscar()
    {
        var productoEncontrado = await ProductosService.Buscar(producto.ProductoId);

        if (productoEncontrado != null)
        {
            producto = productoEncontrado;
        }
        // else {
        //     // Lógica para mostrar un mensaje si no se encuentra el producto
        // }
    }

    public async Task<bool> Validar()
    {
        Existe = await ProductosService.Existe(producto.ProductoId, producto.Nombre);
        return !Existe;
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            return;
        }

        var guardo = await ProductosService.Guardar(producto);
        if (guardo)
        {
            Nuevo();
        }
    }

    public async Task Eliminar()
    {
        var eliminado = await ProductosService.Eliminar(producto.ProductoId);
        Nuevo();
    }
}
