@page "/Facturacion/Create"
@inject FacturacionService facturacionService
@inject ProductosService productosService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Create</PageTitle>
<EditForm Model="Factura" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
            <div class="card-header bg-primary text-white text-center">
                <h3> <i class="fas fa-clipboard-list"></i> Factura</h3>
            </div>

            <div class="card-body">

                <!-- Factura Id -->
                <div class="mb-3">
                    <label for="FacturaId" class="form-label"><strong>FacturaId:</strong></label>
                    <InputNumber @bind-Value="Factura.FacturaId" class="form-control" readonly> </InputNumber>
                </div>

                <!-- Nombre del Cliente -->
                <div class="mb-3">
                    <label for="NombreCliente" class="form-label"><strong>Nombre del Cliente:</strong></label>
                    <InputText @bind-Value="Factura.NombreCliente" class="form-control" required />
                    <ValidationMessage For="@(() => Factura.NombreCliente)" />
                </div>

                <!-- Fecha -->
                <div class="mb-3">
                    <label for="Fecha" class="form-label"><strong>Fecha:</strong></label>
                    <InputDate @bind-Value="Factura.FechaFactura" class="form-control"> </InputDate>
                </div>

                <!-- Método de Pago -->
                <div class="mb-3">
                    <label for="MetodoPago" class="form-label"><strong>Método de Pago:</strong></label>
                    <InputSelect @bind-Value="Factura.MetodoPago" class="form-select" required>
                        <option value="">Seleccione un método de pago</option>
                        <option value="Efectivo">Efectivo</option>
                        <option value="Tarjeta">Tarjeta</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => Factura.MetodoPago)" />
                </div>

                <!-- Selección de Categoría -->
                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="Categoria" class="form-label"><strong>Categoría:</strong></label>
                        <InputSelect @bind-Value="CategoriaSeleccionadaId" class="form-select">
                            <option value="">Seleccione una categoría</option>
                            @foreach (var categoria in ListaCategoriasUnicas)
                            {
                                <option value="@categoria">@categoria</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-6 d-flex align-items-end">
                        <button type="button" class="btn btn-info" @onclick="BuscarProductosPorCategoria">Buscar Productos</button>
                    </div>
                </div>

                <!-- Selección de Producto y Cantidad -->
                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="Producto" class="form-label"><strong>Producto:</strong></label>
                        <InputSelect @bind-Value="ProductoSeleccionadoId" class="form-select">
                            <option value="">Seleccione un producto</option>
                            @foreach (var producto in ListaProductos)
                            {
                                <option value="@producto.ProductoId">@producto.Nombre - @producto.Precio</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-3">
                        <label for="CantidadProducto" class="form-label"><strong>Cantidad:</strong></label>
                        <InputNumber @bind-Value="CantidadProducto" class="form-control" min="1" />
                    </div>
                    <div class="col-md-3 d-flex align-items-end">
                        <button type="button" class="btn btn-success" @onclick="AgregarProducto">Agregar</button>
                    </div>
                </div>

                <!-- Tabla de Productos -->
                <div class="border border-success p-3 mt-3">
                    <h5>Detalles de la Factura</h5>
                    <hr />
                    <table class="table table-light">
                        <thead class="table table-striped">
                            <tr class="text-center">
                                <td>Producto</td>
                                <td>Cantidad</td>
                                <td>Precio Unitario</td>
                                <td>Total</td>
                                <td>Remover</td>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detalle in Factura.DetalleFactura)
                            {
                                <tr>
                                    <td>@detalle.Producto.Nombre</td>
                                    <td>@detalle.Cantidad</td>
                                    <td>@detalle.PrecioUnitario</td>
                                    <td>@(detalle.Cantidad * detalle.PrecioUnitario)</td>
                                    <td>
                                        <button type="button" class="btn btn-outline-danger bi bi-trash"
                                                @onclick="() => RemoverDetalle(detalle)"></button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <hr />
                </div>

                <!-- Total -->
                <div class="row">
                    <div class="col-6 offset-6">
                        <div class="mb-3">
                            <label class="form-label"><strong>Subtotal</strong></label>
                            <label class="form-control text-end"><strong>@Factura.Total</strong></label>
                            <ValidationMessage For="(() => Factura.Total)" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- Footer -->
            <div class="card-footer text-center mt-2">
                <a href="/Facturacion/Index" class="btn btn-secondary"> <span class="bi bi-arrow-left"></span> Volver</a>
                <button type="submit" class="btn btn-primary bi bi-floppy"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
   public Facturacion Factura { get; set; } = new Facturacion();
    public DetalleFactura DetalleFactura { get; set; } = new();
    public int ProductoSeleccionadoId { get; set; }
    public int CantidadProducto { get; set; } = 1; // Cantidad por defecto 1
    public string CategoriaSeleccionadaId { get; set; }
    public List<Productos> ListaProductos { get; set; } = new();
    public List<string> ListaCategoriasUnicas { get; set; } = new();
    public List<DetalleFactura> ListaDetallesFactura { get; set; } = new(); // Lista de detalles de factura
    private string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Factura.DetalleFactura = new List<DetalleFactura>();
        // Cargar todos los productos
        ListaProductos = await productosService.Listar(p => true);

        // Extraer las categorías únicas de la lista de productos
        ListaCategoriasUnicas = ListaProductos
            .Select(p => p.Categoria)
            .Distinct()
            .ToList();

        Factura.FechaFactura = DateTime.Now;
    }

    private async Task BuscarProductosPorCategoria()
    {
        if (!string.IsNullOrEmpty(CategoriaSeleccionadaId))
        {
            // Filtrar los productos según la categoría seleccionada
            ListaProductos = await productosService.Listar(p => p.Categoria == CategoriaSeleccionadaId);
        }
        else
        {
            // Si no se selecciona ninguna categoría, se pueden cargar todos los productos
            ListaProductos = await productosService.Listar(p => true);
        }
    }

    public void CalcularTotal()
    {
        Factura.Total = Factura.DetalleFactura.Sum(d => d.Subtotal);
    }

    public void RemoverDetalle(DetalleFactura detalle)
    {
        Factura.DetalleFactura.Remove(detalle);
        CalcularTotal(); // Actualiza el total después de eliminar un detalle
    }

    public void AgregarProducto()
    {
        if (ProductoSeleccionadoId > 0 && CantidadProducto > 0)
        {
            var producto = ListaProductos.FirstOrDefault(p => p.ProductoId == ProductoSeleccionadoId);
            if (producto != null)
            {
                // Verificar si el producto ya existe en los detalles de la factura
                var detalleExistente = Factura.DetalleFactura
                    .FirstOrDefault(d => d.ProductoId == producto.ProductoId);

                if (detalleExistente != null)
                {
                    // Si el producto ya existe, solo aumentar la cantidad y recalcular el subtotal
                    detalleExistente.Cantidad += CantidadProducto;
                    detalleExistente.Subtotal = detalleExistente.Cantidad * detalleExistente.PrecioUnitario;
                }
                else
                {
                    // Si el producto no existe, agregar un nuevo detalle
                    var detalle = new DetalleFactura
                        {
                            DetalleFacturaId = Factura.DetalleFactura.Count + 1, // Auto incrementar ID
                            ProductoId = producto.ProductoId,
                            Producto = producto,
                            Cantidad = CantidadProducto,
                            PrecioUnitario = producto.Precio,
                            Subtotal = CantidadProducto * producto.Precio
                        };

                    Factura.DetalleFactura.Add(detalle);
                }

                // Recalcular el total de la factura
                CalcularTotal();
            }
        }
    }

    public async Task Guardar()
    {
        try
        {
            // Asignar la lista de detalles al objeto de factura
            Factura.DetalleFactura = ListaDetallesFactura;

            // Guardar la factura
            var guardo = await facturacionService.Guardar(Factura);
            if (guardo)
            {
                // Limpiar los campos y la lista de detalles después de guardar
                Factura = new Facturacion(); // Reiniciar la factura
                ListaDetallesFactura.Clear(); // Limpiar detalles
                NavigationManager.NavigateTo("/Facturacion/Index");
            }
            else
            {
                ErrorMessage = "Error al guardar la factura.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}
